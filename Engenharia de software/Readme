### Engenharia de software é uma das áreas da computação cujo foco está relacionado com análise, desenvolvimento e manutenção de softwares, bem como gestão de projetos e times.

- git clone --recursive https://github.com/CViniciusSDias/alura-ms.git

É uma área bastante extensa, pois contempla as diversas disciplinas necessárias durante todo o processo de criação e manutenação de softwares, tais como:

- Gestão de requisitos;
- Arquitetura e design de sistemas;
- Padrões de projeto;
- Banco de dados;
- Testes de software;
- Gestão de projetos;
- Infraestrutura
- deploy.

1. Design e Arquitetura
    Escrever o código de um software que deve atender as necessidades de negócios de uma organização é uma tarefa complexa. São milhares de linhas de código que precisam ser simples e entender e manter, permitindo que o software seja facilmente adaptado às mudanças que surgem com o tempo.

    Justamente por isso é essencial que o time de desenvolvimento projete uma arquitetura de software que seja simples de manter e evoluir, assim como o design do código escrito que precisa seguir padrões que garantam tais carascterísticas.

- Arquitetura de software = visao de mais alto nivel, separacao de pastas de camadas da aplicacaoclean arquitet arquitetura exagonal oner arquitet
- Design de código visao de mais baixo nivel como escrever cada classe quais padroes aplicar = design parttenes, domain driven design solid dry kiss principio POO
- O que é arquitetura hexagonal ou Ports and Adapters?  domain Drives Disgner = regra do negocio/ dominio
- Clean Architecture (Arquitetura Limpa) - O que é?  MVC MSC = Clen Architecture
- Domain-Driven Design (DDD) - O que é? design orientado ou dominio = DDD
- O que é Mensageria? Message Brokers
- Modelagem de eventos = descreve um sistema, descrever sistemas atraves do evento.
- O que é uma arquitetura orientada a eventos?

2. API e REST
    A computação no geral é muito dinâmica e evolue em um ritmo bastante acelerado. Na engenharia de software não poderia ser diferente.
    Hoje em dia é bem comum a utilização de APIs que seguem o modelo REST no desenvolvimento de aplicações multiplataforma, sendo muito importante entender sobre tais assuntos.

- O que é uma API?
- O que é REST?
- Boas práticas na Modelagem de API's REST

3. Microsserviços

   É comum alguns softwares possuirem centenas de funcionalidades, o que os tornam bastante complexos de realizar manutenções de melhorias e ajustes. Pensando em simplificar tais tipos de software, um novo modelo de arquitetura chamado de Microsserviços surgiu e se tornou um padrão no desenvolvimento de software que são maiores e mais complexos.

- O que são Microsserviços?
- Tipos de Microservices
- O que é um API Gateway?
- O que é Service Mesh?

microsservicos padroes de projeto
alguns problemas
demora no deploy
deploy possivelmente mais perigosos
falhas podem derrubar o sistema todo
1 projeto 1 tecnologia 1 deploys em todo sistema

Data service = receber dados
Bussiness service = agrega dados mais complexos
Trabslation services
Edge service = servico de ponta == BFF

- Separando Servicos
servico de dominio DDD

- Strangler pattern
quebrar um monolito, tirando as funcionalidades dele
Podemos comecar isolando os dados
podemos comecar isolando o dominio.

- Sidecar pattern
  Determine o processo comun
  construa um modulo compartilhavel
  aplique esse sidecar nos servicos que precisam dele

- API Gateway.
- ter um ponto unico de acesso ao sistema
  Dessa forma podemos ter controles de acesso unificados, autenticação em ponto único, etc. Mas essa também é a principal desvantagem: o ponto único de falha

  ponto único de entrada na aplicação com API Gateway
  Edge Service
  ideia de ter um Gateway por cliente com o Edge Pattern

CQRS
Agora em um determinado microsserviço podemos ter a aplicação de um padrão conhecido como CQRS, que significa command query responsibility segragation, que é segregação da responsabilidade entre um comando e uma busca.

Microsserviços: explorando os conceitos

NÃO pode ser chamada de API?
Uma URL.
Uma URL não é uma API. Ela é uma interface do mundo externo com um servidor, mas não necessariamente uma interface de programação, ou seja, ela pode não expor funcionalidade alguma.

necessidade de comunicação entre serviços;
Conhecemos técnicas de comunicação síncrona e assíncrona;
Entendemos falhas de comunicação e algumas soluções para elas;
Aprendemos sobre o conceito de Service Discovery e DNS.
Citamos técnicas de segurança em rede, como listas de IP, redes virtuais e firewall;
Vimos a necessidade de termos várias camadas de segurança, que é o conceito de Defense in Depth.
Analisamos a infraestrutura de um projeto com microsserviços;
Vimos como tornar serviços independentes;
Aprendemos que seguir os 12 fatores pode nos ajudar.

prendemos que cada projeto pode ter seu processo de build;
Conhecemos ferramentas como Jenkins, Travis CI e GitHub Actions;
Criamos um workflow no GitHub Actions;
Vimos o build falhar e o corrigimos;
Tornamos nosso processo mais robusto, exigindo pull requests e reviews.

Falamos sobre a possibilidade de ter mais de uma aplicação front-end;
Discutimos sobre Optimistic and Pessimistic UI Rendering;
Conhecemos o conceito de micro frontends.

### Integracao Continua

Integração Contínua (CI) significa integrar as alterações no mainline (master ou trunk) diariamente
Para usar Integração Contínua, é necessário usar um sistema de controle de versão (VCS), e no final integramos o código no repositório (usar Git não é obrigatório)
Aplicando Integração Contínua corretamente, diminuímos os problemas de integração (como merge hell), melhoramos a comunicação entre desenvolvedores e antecipamos a descoberta de bugs
Os estilos de organização de projeto
Mono-repo possui todos os projetos em um único repositório
Multi-repo separa um repositório para cada projeto

E alguns frameworks famosos da área de teste:

Selenium (automação do navegador)
Cucumber (testes de aceitação)
Postman e SoapUI (testes de API)
JMeter (stress tests)
JUnit, xUnit, PHPUnit (automação de testes)
entre muitos outros frameworks e bibliotecas

Para usar integração contínua com sucesso, é preciso ter testes automatizados
Esses testes devem verificar a maior parte do código
TDD é uma metodologia que pode ajudar na criação dos testes
Os testes representam feedback sobre a saúde/qualidade do seu projeto
O desenvolvedor deve rodar os testes antes de enviar as alterações para o repositório
Se for impossível executar todos os testes (por causa da infraestrutura ou demora da execução), é possível executar apenas os testes de unidade ou uma suíte de testes mais importantes (smoke testes)
O build do projeto deve ser simples e totalmente automatizado
É boa prática o uso de uma ferramenta especializada para o build do software
Tente usar um "single command build" para executar o build
A execução dos testes e build não deve se tornar uma razão para atrasar o build, para evitar:
Otimize build
Tente respeitar o tempo de 10 minutos para o build (alguns falam de 5 minutos)
Se o build for falhar, a ideia é que ele falhe o mais rápido possível.

O servidor de integração contínua monitora o repositório de código
Ao detectar uma alteração, deve iniciar o build do projeto
O build deve acontecer a cada novo commit
O resultado do build deve ser publicado
Os desenvolvedores devem ser notificados sobre o status do build
Um build quebrado deve ser arrumado em no máximo 10 minutos, com prioridade máxima
É responsabilidade de todos da equipe arrumar um build quebrado

A integração contínua é uma prática que faz parte da entrega contínua (continuous delivery - CD)
A entrega contínua define uma série de práticas e padrões para construir e deployar a aplicação continuamente
Não deve existir nenhum motivo técnico para impedir o deploy (apenas um motivo de negócio)
Qualquer alteração no trunk principal é releasable (pode entrar em produção)
A entrega contínua é uma evolução da integração contínua e envolve todo o ciclo do projeto, incluindo equipes de QA, deploy e operações
a diferença entre a entrega contínua e o deploy contínuo é, que no deploy contínuo todas as alterações realmente entra em produção, o tempo todo
DevOps é um movimento cultural, que visa a colaboração entre as equipes envolvidas no desenvolvimento e entrega de software, para melhorar a qualidade e velocidade do software
DevOps é sobre colaboração, melhoria e aprendizagem contínua

A entrega contínua:

Visa diminuir todo o risco do deploy através de deploys frequentes e bem testados
Normalmente é implementada através de um pipeline de entrega do software
O pipeline representa o fluxo contínuo das alterações (valor) do código até o ambiente de produção
Visa automatizar todo o processo do deploy e aplicar cada alteração
O Deploy Contínuo coloca qualquer alteração em produção
A Entrega Contínua não coloca qualquer alteração em produção, mas só por motivos de negócio

Vimos que a base da Entrega Contínua é a Integração Contínua
Vimos os princípios, que são:
Automatize
Versione
Repita
Garanta a qualidade
Defina o "done"
Crie o delivery team
Use melhoria contínua
Além disso, falamos os elementos mais importantes para implementar a entrega contínua, como a cultura DevOps, Pattern de deployment e mudanças arquiteturais.

Build/Commit stage
Automated Acceptance Testing Stage (Testes de aceitação)
User Acceptance Testing Stage (Homologação)
As etapas build e AAT são totalmente automatizadas. UAT é manual.

As etapas existem pois queremos receber feedback o mais rápido possível, ou seja, executamos os testes rápidos bem no início do pipeline.

Também falamos sobre algumas boas práticas na construção e execução do pipeline:

O pipeline é a única forma de deploy
O desempenho do pipeline importa, ou seja, otimize-o
Build do artefato no início e apenas uma vez
O build deve ser independente do ambiente
Ambientes deve ser iguais ou muito semelhantes ao de produção
Use ambientes efêmeros (temporários) onde puder
O deploy deve ser executado igual para qualquer ambiente

Ambas as etapas executam os testes de maneira automatizada
O stage de commit foca nos testes de unidade e integração.
O stage AAT foca nos testes funcionais, que testam o sistema todo, baseado em um requisito
O commit stage deve executar rápido (menos de 10 minutos) e iniciar a cada commit
O stage AAT inicia quando commit stage foi executado com sucesso
O stage AAT é mais demorado
Os testes de aceitação são mais caros de escrever e manter, mas trazem muito valor, pois testam o sistema todo. Os testes de aceitação são escritos pela equipe inteira (analista, desenvolvedor, etc).

Quando um build quebra, todos são responsáveis. Consertar o problema é prioridade da equipe.

Homologação (User Acceptance Testing Stage)
Teste de carga (Capacity Testing Stage)
O ambiente de homologação serve para o usuário final validar se o software atende aos requisitos e expectativas. A equipe deve participar nesses testes e eles representam uma oportunidade de aprender e receber feedback sobre a aceitação e usabilidade do software. Esses testes devem ser executados desde início do projeto.

O ambiente para testes de carga serve para garantir que o software atende os requisitos não funcionais, como desempenho e carga. Os testes devem fazer parte do desenvolvimento do software e ser aplicados em ciclos. Aqui, é importante definir métricas claras e monitorar o sistema.

Ter features invísiveis para o cliente também é chamado de dark launching, quando já implantamos o novo software, mas o cliente ainda não tem acesso (ou só alguns clientes).

Resumindo:

Vimos a diferença entre deploy (implantação) e release (publicação)
Deploy é colocar as alterações em produção (provisionar, configurar, instalar)
Release é deixar as alterações visíveis
Os padrões para o release do software são:

Blue-Green Deployment
Canary Release
Feature Toggles

### Scrum: agilidade em seu projeto Scrum: agilidade em seu projeto

O diferencial do Scrum é ser um modelo iterativo, em que o processo de trabalho é mais dinâmico e flexível, permitindo um aprimoramento do produto durante o seu desenvolvimento.


Diferente de outras metodologias e ferramentas para gerir projetos e/ou desenvolver produtos, o Scrum se destacou por proporcionar um processo iterativo, que permite o aprimoramento do produto durante o seu desenvolvimento, sem esperar lançá-lo para validar a sua eficiência e a sua conexão com o público. Note que tudo isso traz mais assertividade ao produto e agilidade para as entregas do time.

Os três pilares do Scrum - Transparência, Inspeção e Adaptação - são conceitos fundamentais que sustentam a eficácia do framework Scrum. A transparência refere-se à clareza e à visibilidade de todas as informações relevantes sobre o trabalho realizado pelo time Scrum. A inspeção envolve a avaliação constante do trabalho realizado e dos resultados obtidos para identificar problemas e oportunidades de melhoria. A adaptação implica em ajustar e melhorar continuamente o processo de trabalho com base nas informações obtidas durante a inspeção. Tenha em mente que esses três pilares são interdependentes e essenciais para garantir a melhoria contínua e o sucesso do Scrum em projetos ágeis.

Planejamento do produto, Planejamento da Sprint, Execução da Sprint, Revisão e Retrospectiva da Sprint.

Compreensão do negócio e das necessidades dos clientes e usuários.
Essa é uma característica fundamental para uma pessoa que deseja ser Product Owner, uma vez que precisa entender o contexto de negócio em que o produto será utilizado e também as necessidades de clientes e usuários. Esse conhecimento é básico para poder tomar decisões assertivas sobre o product backlog, garantindo que o produto atenda aos requisitos e aos objetivos de negócio.

Auxiliar o time a entender e seguir as práticas e os valores do Scrum.
A principal responsabilidade de uma pessoa Scrum Master é auxiliar o time a entender e seguir os processos e os valores do Scrum, promovendo uma cultura ágil e facilitando a adoção das melhores práticas pela equipe. Esse trabalho envolve atuar como uma pessoa facilitadora, para garantir que o time se comunique de forma eficaz, colabore e trabalhe em conjunto para alcançar os objetivos da Sprint e do projeto como um todo.

No Scrum, os papéis são fundamentais para a aplicação eficiente do framework. O Scrum define três papéis principais: o Product Owner, o Scrum Master e a equipe de Desenvolvimento. Cada papel tem responsabilidades específicas e contribui para o sucesso do projeto.

Agora, relembre o problema que você apontou no desafio passado para ser resolvido com Scrum e elenque quem seriam as pessoas que assumiriam cada um dos papéis do framework nesse contexto específico. Explique porque você acha que cada uma dessas pessoas é a ideal para desempenhar os papéis de Product Owner, Scrum Master ou fazer parte do time de desenvolvimento.


Nome do projeto: Plataforma de Aprendizado Online

Visão Geral: A empresa EduTech é uma startup que deseja criar uma plataforma de aprendizado on-line para oferecer cursos e treinamentos para profissionais de tecnologia da informação. A plataforma será uma solução inovadora para aqueles que desejam aprimorar suas habilidades em programação, segurança cibernética, gerenciamento de projetos e outras áreas relacionadas à TI.

Objetivos de Negócio:

Tornar-se líder de mercado no segmento de aprendizado on-line para profissionais de TI;
Oferecer uma ampla variedade de cursos e treinamentos, com alta qualidade de conteúdo e experiência do usuário;
Atrair um grande número de usuários registrados e aumentar a base de clientes pagantes;
Fornecer uma plataforma intuitiva, interativa e fácil de usar, que possibilite o aprendizado flexível e acessível a qualquer momento e em qualquer lugar;
Proporcionar um ambiente de aprendizado colaborativo, com recursos de comunicação entre as pessoas estudantes e instrutoras dos cursos.
Descrição do Produto: a plataforma de aprendizado on-line será desenvolvida como uma aplicação web responsiva e também terá aplicativos móveis para dispositivos iOS e Android. Ela oferecerá uma ampla variedade de cursos e treinamentos, com diferentes níveis de dificuldade e formatos, como aulas em vídeo, tutoriais, exercícios práticos e questionários de avaliação.

No case fictício apresentado, o product backlog da plataforma de aprendizado on-line poderia incluir os seguintes itens:

Criação de conta e perfil do usuário: os usuários poderão criar uma conta, preencher seu perfil com informações pessoais, interesses e preferências de aprendizado, além de ter acesso ao painel de controle do aluno.

Catálogo de cursos: as pessoas estudantes poderão navegar pelo catálogo de cursos, visualizar detalhes sobre os cursos, como descrição, instrutor, duração, pré-requisitos, avaliações e preço.

Compra de cursos: as pessoas estudantes poderão comprar cursos individuais ou se inscrever em planos de assinatura para acesso a múltiplos cursos. Será necessário integrar a plataforma com um sistema de pagamento seguro e confiável.

Acesso aos cursos: as pessoas estudantes terão acesso aos cursos adquiridos ou aos quais estão inscritas em seu painel de controle. Elas poderão assistir às aulas em vídeo, ler materiais de apoio, realizar exercícios e questionários e acompanhar seu progresso de aprendizado.

Recursos de aprendizado colaborativo: as pessoas estudantes poderão se comunicar com as pessoas instrutoras e outras estudantes por meio de fóruns de discussão, salas de chat ou outras ferramentas de comunicação integradas à plataforma.

Sistema de avaliação de cursos: as pessoas estudantes poderão avaliar os cursos que concluírem, fornecendo feedback sobre a qualidade do conteúdo, do instrutor e da experiência do usuário. Essas avaliações ajudarão outros usuários a tomar decisões informadas sobre quais cursos escolher.

Recursos de suporte a clientes: as pessoas estudantes podem acessar o suporte ao enfrentar qualquer dificuldade ou erro dentro da plataforma.

Isso não significa que outros ítens não possam ser adicionados neste caso, detalhando ainda mais o product backlog. Porém, os ítens citados acima seriam os mais importantes em um produto como uma plataforma de aprendizagem online. A ordem desses ítens também poderia ser alterada.

Agora, se a sua resposta não foi exatamente como essa, não tem problema! O importante é você saber identificar que um product backlog eficiente deve ser detalhado, listando toda e qualquer funcionalidade e aspecto que um produto ou solução deva ter para funcionar bem e gerar valor para o seu usuário.


Discutir com o Product Owner e o Scrum Master para avaliar a prioridade do novo requisito e, se necessário, replanejar a sprint.

De acordo com o Scrum Guide, o product backlog não deve ser alterado durante uma sprint. Porém, em situações onde um novo requisito de alta prioridade é identificado durante a sprint planning, a equipe de desenvolvimento deve discutir com as pessoas Product Owner e Scrum Master para avaliar a prioridade do novo requisito e determinar se ele deve ser incluído na sprint atual ou se será adicionado em uma próxima sprint.

A sprint é um período de tempo fixo, geralmente de 1 a 4 semanas, durante o qual a equipe de projeto desenvolve o produto.


No período, normalmente com duração de 1 a 4 semanas, a equipe de projeto se concentra em desenvolver um incremento de produto funcional. Durante a sprint, a equipe trabalha nas tarefas do backlog da sprint, que são as tarefas selecionadas pelo time para serem concluídas durante a sprint.


A reunião de revisão da sprint, também conhecida como Sprint Review, é uma oportunidade para a equipe Scrum refletir sobre o trabalho realizado na sprint anterior, compartilhar os resultados e receber feedback. É uma etapa muito importante no processo Scrum para promover a transparência e a colaboração entre os membros da equipe.

Confira, a seguir, um passo a passo descomplicado para conduzir esse evento Scrum.

Passo 1: Prepare a reunião

Antes de iniciar a reunião, é importante se preparar adequadamente. Certifique-se de que a equipe de desenvolvimento tenha concluído todas as tarefas planejadas para a sprint e esteja pronta para compartilhar os resultados com os demais membros do time Scrum. Além disso, no caso de um encontro presencial, verifique se a sala de reunião está reservada e os recursos técnicos, como projetor ou tela de apresentação, estão funcionando corretamente. No caso de um encontro on-line, verifique se as ferramentas de que irá precisar estão funcionando.

Passo 2: Convite aos participantes

Envie convites aos membros do time Scrum, que incluem o Scrum Master, o Product Owner e a equipe de desenvolvimento. Certifique-se de que todos estejam cientes da data, do horário e do local da reunião.

Passo 3: Inicie a reunião

Inicie a reunião de revisão da sprint no horário marcado. Comece com uma breve introdução, explicando o propósito da reunião e os objetivos a serem alcançados.

Passo 4: Demonstre as funcionalidades concluídas

A equipe de desenvolvimento deve mostrar as funcionalidades concluídas durante a sprint. Isso pode ser feito por meio de uma demonstração prática do software desenvolvido ou exibindo os resultados em uma apresentação de slides. Certifique-se de que todas as funcionalidades sejam apresentadas de forma clara e compreensível.

Passo 5: Receba feedback

Após a apresentação das funcionalidades concluídas, é hora de receber feedback dos participantes. O Product Owner e outros membros do time Scrum podem fazer perguntas, fornecer comentários e sugerir melhorias. É importante encorajar uma discussão construtiva e garantir que todas as preocupações sejam ouvidas.

Passo 6: Atualize o Product Backlog

Com base no feedback recebido, a pessoa Product Owner deve atualizar o Product Backlog, que é a lista de itens a serem desenvolvidos futuramente. Os itens que foram concluídos na sprint devem ser marcados como concluídos e removidos do Product Backlog, enquanto os novos itens identificados durante a revisão da sprint devem ser adicionados.

Passo 7: Encerre a reunião

Após a discussão e a atualização do Product Backlog, encerre a reunião de revisão da sprint. É importante garantir que todos os tópicos tenham sido abordados e que haja um entendimento claro das próximas etapas a serem tomadas.

Passo 8: Busque a melhoria contínua

Após a reunião, a equipe Scrum deve realizar uma retrospectiva da sprint para identificar oportunidades de melhoria e implementar ações corretivas na próxima sprint. Esse é um passo importante para garantir um aperfeiçoamento contínuo do processo Scrum.


A Sprint Retrospective, ou Retrospectiva, é de extrema importância no Scrum, pois é um evento dedicado à reflexão e à melhoria contínua. Durante a retrospectiva da sprint, a equipe tem a oportunidade de avaliar o que funcionou bem, identificar desafios e definir ações de melhoria para a próxima sprint. Essa prática permite que a equipe aprenda com suas experiências anteriores, aprimore seu processo de trabalho e promova a evolução contínua do time, resultando em um aumento da eficiência e da qualidade das entregas.


Deve-se selecionar cuidadosamente os membros do time Scrum, considerando as suas habilidades, suas experiências, sua diversidade e seus valores.


Montar uma equipe eficaz para o planejamento de um evento corporativo envolve selecionar cuidadosamente os membros da equipe, levando em consideração suas habilidades, suas experiências, sua diversidade e seus valores. Note que isso permite que a equipe possua as competências necessárias para lidar com os desafios do planejamento e a execução do evento, incluindo logística, marketing, finanças e comunicação. Além disso, garante que o time Scrum esteja alinhado em relação aos valores que embasam o framework.

Colaborar intensamente em todas as etapas do projeto, sendo auto-organizado e multifuncional.


A mentalidade correta de um time Scrum é de colaboração intensa, auto-organização e multifuncionalidade. Os membros do time Scrum trabalham juntos, compartilhando conhecimentos e habilidades para alcançar os objetivos do projeto, sendo responsáveis por se organizar, tomar decisões e entregar a solução funcionando.

### Organização de Equipes Ágeis: os papéis existentes em uma equipe

Uma equipe ágil é um grupo de pessoas com todos os conhecimentos necessários para produzir algo.
Em um time ágil o conhecimento necessário para atendimento aos objetivos centrais do projeto está contido na multidisciplinaridade da equipe.

diferença entre Modelo Cascata (Waterfall) e Ágil.

Modelo Cascata: ele favorece os problemas de comunicação (o famoso telefone sem fio), com necessidade de muitos documentos e protocolos, muitos hand-offs entre os times e, com isso, a validação de tudo aquilo que foi construído durante o processo de desenvolvimento de um projeto só acontece no final.

Por outro lado, há um foco muito forte na especialização de pessoas.

Modelo ágil: em uma equipe ágil, todas as pessoas que participarão do desenvolvimento do projeto se juntam em todas as etapas desse processo, sendo apenas uma só equipe.


Objetivos compartilhados, timebox e restrições.
Exatamente. Sabendo para onde o time precisa ir (os objetivos), até quando ele precisa chegar (timebox) e quais os limites que ele possui (restrições) o time pode se auto organizar para conseguir alcançar esse objetivo.

Objetivo compartilhado: defina o objetivo no qual todos da equipe participarão do desenvolvimento do projeto de forma compartilhada.

Timebox: espaço de tempo necessário para que a auto organização funcione.

Restrições: o que não deve ser feito no desenvolvimento do projeto.

Funcionalidades: essa equipe se organiza em torno de uma funcionalidade e se preocupa em maximizar o valor na entrega ao usuário para uma melhor experiência possível. A equipe precisa ser multidisciplinar, já que ela precisa trabalhar em diversos pontos no código.

Componente: essa equipe funciona muito bem para fazer otimizações locais, porém pode ser crítico mexer em um componente já que ele é usado em diversas funcionalidades, além de garantir a sincronização dos componentes que foram alterados.

Jornada do cliente: essa equipe foca em grupos de clientes que possui comportamentos ou necessidades semelhantes.


Qualidade, Eficiência, Eficácia.


Perfeito. Dev Team (qualidade), Scrum Master (eficiência), Product Owner (eficácia). Esses 3 papéis juntos compõem um Scrum Team e vamos entendê-los mais a fundo nas próximas aulas.

o Scrum team é um conjunto de pessoas que tem o objetivo de fazer produtos excepcionais, e para isso acontecer, são necessárias 3 responsabilidades:

Negócio: responsabilidade em garantir que o produto a ser desenvolvido faça sentido para o mercado. Não adianta você produzir o melhor produto, se não tem cliente para o mesmo.

Tecnológica: responsabilidade em garantir que o produto produzido esteja correto para aquele mercado em específico e público-alvo.

Eficiência: responsabilidade em garantir que o time opere com a melhor qualidade possível.

O que é Product Owner?
Nessa aula aprendemos que a pessoa responsável pelo papel de Product Owner tem o desafio de conseguir maximizar o valor que aquele produto irá gerar para o negócio.

Para isso, o PO, além de precisar ter um foco alto e senso de dono, precisará conversar frequentemente com as outras áreas que fazem parte da empresa, para entender quais são os pontos-chave que remetem a dor dos clientes, e conhecer a fundo o produto e mercado em que a empresa está inserida.

Como é o dia a dia de um PO?
No seu dia a dia, o PO terá que descrever o que precisa ser feito, e para isso, é necessário conversar com outras áreas para entender as necessidades e também o que pode ou não ser feito. Além de priorizar o que precisa ser construído, muitas vezes o PO terá que dizer não para funcionalidades que agregam menos valor para o negócio/projeto naquele momento.

Especialista: alguém com profundidade de conhecimento em algum assunto;

Generalista: pessoa que sabe um pouco de cada coisa, mas não tem nenhum conteúdo muito aprofundado;

T-shaped: alguém com especialidade em algo, mas com um conhecimento generalizado em outras coisas;

Construir, validar e integrar o incremento de um produto.


Exatamente. Uma equipe de desenvolvimento é a responsável por executar o que foi definido, validando para garantir que está adequado.

a pessoa no papel de Scrum Master é responsável por maximizar a eficiência do Scrum Team, promovendo e suportando o Scrum e ajudando a melhorar as interações existentes.

Essa pessoa possui algumas características principais:

Líder servidor: tem como principal objetivo fazer com que as outras pessoas tenham sucesso.

Coach: uma pessoa que consegue fazer perguntas que gerem reflexão.

Facilitador: consegue organizar o trabalho.

Professor: consegue ensinar para a equipe.

Remove impedimentos.

Expert em scrum.

Possui Social Skills: capacidade de conseguir conversar e interagir com outras pessoas.

Agente de mudanças: tem o objetivo de melhorar a organização, não apenas o scrum team.

O método Kanban é constituído por tarefas e é dividido em 5 etapas: documentação, prototipação, codificação, teste e entrega.
Em cada uma das etapas são afixados post-its, que costumam conter uma breve explicação da tarefa. Um determinado grupo de pessoas atuam em cada etapa, podendo ser uma, duas, ou até mais.

Temos os papéis opcionais dentro da ferramenta Kanban que são:

Service Delivery Manager: é a pessoa que garante que os itens não fiquem parados, tem papel de facilitador no fluxo de mudanças e melhorias.

Service Request Manager: tem como papel principal fazer a ordenação e papel dos itens, qual item terá maior impacto e retorno de investimento.

### Extreme Programming: metodologia de desenvolvimento ágil de software
Conhecemos os valores do XP
Comunicação
Simplicidade
Feedback
Coragem
Respeito

o XP pode ser útil na parte de gestão e projeto
Vimos que é importante manter o cliente presente, próximo à equipe
Conhecemos as vantagens de um time coeso
Falamos sobre a necessidade de manter um nível saudável de trabalho
Entendemos que é possível usar metáforas e que devemos sempre ter projetos simples

Aprendemos como o XP pode ser útil na parte de planejamento
Conhecemos as user stories e o jogo do planejamento
Falamos sobre qualidade como pequenas entregas podem ajudar com isso
Conversamos sobre automação de testes
Conhecemos o conceito de Spikes de Planejamento

o que é refatoração e o motivo de ser tão importante
Entendemos o conceito por trás da reunião diária em pé
Conhecemos a prática de pair programming e vimos algumas de suas vantagens
### Engenharia de software é uma das áreas da computação cujo foco está relacionado com análise, desenvolvimento e manutenção de softwares, bem como gestão de projetos e times.

- git clone --recursive https://github.com/CViniciusSDias/alura-ms.git

É uma área bastante extensa, pois contempla as diversas disciplinas necessárias durante todo o processo de criação e manutenação de softwares, tais como:

- Gestão de requisitos;
- Arquitetura e design de sistemas;
- Padrões de projeto;
- Banco de dados;
- Testes de software;
- Gestão de projetos;
- Infraestrutura
- deploy.

1. Design e Arquitetura
    Escrever o código de um software que deve atender as necessidades de negócios de uma organização é uma tarefa complexa. São milhares de linhas de código que precisam ser simples e entender e manter, permitindo que o software seja facilmente adaptado às mudanças que surgem com o tempo.

    Justamente por isso é essencial que o time de desenvolvimento projete uma arquitetura de software que seja simples de manter e evoluir, assim como o design do código escrito que precisa seguir padrões que garantam tais carascterísticas.

- Arquitetura de software = visao de mais alto nivel, separacao de pastas de camadas da aplicacaoclean arquitet arquitetura exagonal oner arquitet
- Design de código visao de mais baixo nivel como escrever cada classe quais padroes aplicar = design parttenes, domain driven design solid dry kiss principio POO
- O que é arquitetura hexagonal ou Ports and Adapters?  domain Drives Disgner = regra do negocio/ dominio
- Clean Architecture (Arquitetura Limpa) - O que é?  MVC MSC = Clen Architecture
- Domain-Driven Design (DDD) - O que é? design orientado ou dominio = DDD
- O que é Mensageria? Message Brokers
- Modelagem de eventos = descreve um sistema, descrever sistemas atraves do evento.
- O que é uma arquitetura orientada a eventos?

2. API e REST
    A computação no geral é muito dinâmica e evolue em um ritmo bastante acelerado. Na engenharia de software não poderia ser diferente.
    Hoje em dia é bem comum a utilização de APIs que seguem o modelo REST no desenvolvimento de aplicações multiplataforma, sendo muito importante entender sobre tais assuntos.

- O que é uma API?
- O que é REST?
- Boas práticas na Modelagem de API's REST

3. Microsserviços

   É comum alguns softwares possuirem centenas de funcionalidades, o que os tornam bastante complexos de realizar manutenções de melhorias e ajustes. Pensando em simplificar tais tipos de software, um novo modelo de arquitetura chamado de Microsserviços surgiu e se tornou um padrão no desenvolvimento de software que são maiores e mais complexos.

- O que são Microsserviços?
- Tipos de Microservices
- O que é um API Gateway?
- O que é Service Mesh?

microsservicos padroes de projeto
alguns problemas
demora no deploy
deploy possivelmente mais perigosos
falhas podem derrubar o sistema todo
1 projeto 1 tecnologia 1 deploys em todo sistema

Data service = receber dados
Bussiness service = agrega dados mais complexos
Trabslation services
Edge service = servico de ponta == BFF

- Separando Servicos
servico de dominio DDD

- Strangler pattern
quebrar um monolito, tirando as funcionalidades dele
Podemos comecar isolando os dados
podemos comecar isolando o dominio.

- Sidecar pattern
  Determine o processo comun
  construa um modulo compartilhavel
  aplique esse sidecar nos servicos que precisam dele

- API Gateway.
- ter um ponto unico de acesso ao sistema
  Dessa forma podemos ter controles de acesso unificados, autenticação em ponto único, etc. Mas essa também é a principal desvantagem: o ponto único de falha

  ponto único de entrada na aplicação com API Gateway
  Edge Service
  ideia de ter um Gateway por cliente com o Edge Pattern

CQRS
Agora em um determinado microsserviço podemos ter a aplicação de um padrão conhecido como CQRS, que significa command query responsibility segragation, que é segregação da responsabilidade entre um comando e uma busca.

Microsserviços: explorando os conceitos

NÃO pode ser chamada de API?
Uma URL.
Uma URL não é uma API. Ela é uma interface do mundo externo com um servidor, mas não necessariamente uma interface de programação, ou seja, ela pode não expor funcionalidade alguma.

necessidade de comunicação entre serviços;
Conhecemos técnicas de comunicação síncrona e assíncrona;
Entendemos falhas de comunicação e algumas soluções para elas;
Aprendemos sobre o conceito de Service Discovery e DNS.
Citamos técnicas de segurança em rede, como listas de IP, redes virtuais e firewall;
Vimos a necessidade de termos várias camadas de segurança, que é o conceito de Defense in Depth.
Analisamos a infraestrutura de um projeto com microsserviços;
Vimos como tornar serviços independentes;
Aprendemos que seguir os 12 fatores pode nos ajudar.

prendemos que cada projeto pode ter seu processo de build;
Conhecemos ferramentas como Jenkins, Travis CI e GitHub Actions;
Criamos um workflow no GitHub Actions;
Vimos o build falhar e o corrigimos;
Tornamos nosso processo mais robusto, exigindo pull requests e reviews.

Falamos sobre a possibilidade de ter mais de uma aplicação front-end;
Discutimos sobre Optimistic and Pessimistic UI Rendering;
Conhecemos o conceito de micro frontends.

### Integracao Continua

Integração Contínua (CI) significa integrar as alterações no mainline (master ou trunk) diariamente
Para usar Integração Contínua, é necessário usar um sistema de controle de versão (VCS), e no final integramos o código no repositório (usar Git não é obrigatório)
Aplicando Integração Contínua corretamente, diminuímos os problemas de integração (como merge hell), melhoramos a comunicação entre desenvolvedores e antecipamos a descoberta de bugs
Os estilos de organização de projeto
Mono-repo possui todos os projetos em um único repositório
Multi-repo separa um repositório para cada projeto

E alguns frameworks famosos da área de teste:

Selenium (automação do navegador)
Cucumber (testes de aceitação)
Postman e SoapUI (testes de API)
JMeter (stress tests)
JUnit, xUnit, PHPUnit (automação de testes)
entre muitos outros frameworks e bibliotecas

Para usar integração contínua com sucesso, é preciso ter testes automatizados
Esses testes devem verificar a maior parte do código
TDD é uma metodologia que pode ajudar na criação dos testes
Os testes representam feedback sobre a saúde/qualidade do seu projeto
O desenvolvedor deve rodar os testes antes de enviar as alterações para o repositório
Se for impossível executar todos os testes (por causa da infraestrutura ou demora da execução), é possível executar apenas os testes de unidade ou uma suíte de testes mais importantes (smoke testes)
O build do projeto deve ser simples e totalmente automatizado
É boa prática o uso de uma ferramenta especializada para o build do software
Tente usar um "single command build" para executar o build
A execução dos testes e build não deve se tornar uma razão para atrasar o build, para evitar:
Otimize build
Tente respeitar o tempo de 10 minutos para o build (alguns falam de 5 minutos)
Se o build for falhar, a ideia é que ele falhe o mais rápido possível.
